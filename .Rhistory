clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
plot_net(metagenome, distance="(A+B-2*J)/(A+B)", type="samples",color="PCA_Chem_Group", maxdist=0.7)
palette <- colorRampPalette(pal_jco()(11))(nhue)
source('plot_utils.R')
for (clade in c('nirS', 'dsrB')) {
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
install.packages("viridis")
source('plot_utils.R')
for (clade in c('nirS', 'dsrB')) {
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
sample(1:4, 10)
source('plot_utils.R')
fig_dir <- "./figures"
metagenome <- load_metagenome()
for (clade in c('nirS', 'dsrB')) {
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
metagenome <- load_metagenome()
for (clade in c('nirS', 'dsrB')) {
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
rep(c(1,2), 3)
for (clade in c('nirS', 'dsrB')) {
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
brewer.pal.info
str(brewer.pal.info)
brewer.pal.info[['Set1']]
brewer.pal.info['Set1']
brewer.pal.info[, 1]
names(brewer.pal.info)
brewer.pal('Set1')
brewer.pal(name='Set1')
install.packages("cartography")
library(cartography)
cartography::display.carto.pal('multi.pal')
cartogra
cartography::carto.pal('multi.pal', 10)
qual_col_pals <- carto.pal('multi.pal', 20)
for (clade in c('nirS', 'dsrB')) {
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
source('plot_utils.R')
for (clade in c('nirS', 'dsrB')) {
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
ggsci::scale_color_igv()
ggsci::scale_color_igv(4)
ggsci::scale_color_igv()
ggsci::scale_color_igv()(5)
ggsci::pal_igv()
ggsci::pal_igv()(10)
ggsci::pal_igv()(20)
ggsci::pal_igv()(200)
source('loader.R')
source('plot_utils.R')
fig_dir <- "./figures"
metagenome <- load_metagenome()
for (clade in c('nirS', 'dsrB')) {
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
?mapply
sapply(get_variable(mg, c(x, hue)))
sapply(get_variable, mg, c(x, hue)))
apply(get_variable, mg, c(x, hue)))
?apply
?sapply
sapply(c('eruption'. )
sapply(c('eruption', 'PCA_Chem_Group'), function(x) get_variable(mg, x))
paste(sapply(c('eruption', 'PCA_Chem_Group'), function(x) get_variable(mg, x)))
paste0(sapply(c('eruption', 'PCA_Chem_Group'), function(x) get_variable(mg, x)))
paste0(sapply(c('eruption', 'PCA_Chem_Group'), function(x) get_variable(mg, x)), collapse='.')
x <- c('eruption', 'PCA_Chem_Group')
factor_data <- sapply(x, function(x) get_variable(mg, x))
factor_data
factor_data <- sapply(x, function(y) get_variable(mg, y))
factor_data
apply(paste0, factor_data)
apply(paste0, 1, factor_data)
apply(paste0, 2, factor_data)
?apply
apply(factor_data, 1, paste0)
apply(factor_data, 1, paste0, collapse='.')
factor_data <- sapply(x, function(y) get_variable(mg, y))
sample_data(mg)$combined <- apply(factor_data, 1, paste0, collapse='.')
mg <- merge_samples(mg, 'combined')
mg
sample_data(mg)
# Fix merge_samples metadata (GitHub issue #243)
for (xi in x) {
xi.values <- sample_data(mg)[[xi]]
xi.levels <- levels(sample_data(metagenome)[[xi]])
sample_data(mg)[[xi]] <- factor(xi.values, levels=xi.levels)
}
sample_data(mg)[[x]]
sample_data(mg)
mg <- tax_glom(metagenome, hue) # Group OTUs by `hue`
metagenome <- load_metagenome()
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
mg <- tax_glom(mg, hue)
# Group by multiple columns
factor_data <- sapply(x, function(y) get_variable(mg, y))
sample_data(mg)$combined <- apply(factor_data, 1, paste0, collapse='.')
mg <- merge_samples(mg, 'combined')
xi
xi.values <- sample_data(mg)[[xi]]
xi.levels <- levels(sample_data(metagenome)[[xi]])
factor(xi.values, levels=xi.levels)
xi.values
head(factor_data)
factor_data[['eruption']]
(factor)
str(factor_data)
factor_data$eruption
unlist(factor_data$eruption)
unlist(factor_data)
unlist(factor_data)$eruption
as.data.frame(factor_data)
as.data.frame(factor_data)$eruption
factor_data[,'eruption']
# Fix merge_samples metadata (GitHub issue #243)
for (xi in x) {
sample_data(mg)[[xi]] <- factor(
factor_data[, xi], levels=levels(sample_data(metagenome)[[xi]])
)
}
factor_data[, xi]
length(factor_data[, xi])
mg
sample_data(mg)
sample_names(mg)
strsplit(sample_names(mg), '.')
unlist(strsplit(sample_names(mg), '.'))
unlist(strsplit(sample_names(mg), '\.'))
unlist(strsplit(sample_names(mg), '\\.'))
as.data.frame(unlist(strsplit(sample_names(mg), '\\.')))
as.data.frame(strsplit(sample_names(mg), '\\.'))
t(as.data.frame(strsplit(sample_names(mg), '\\.')))
# Group by multiple columns
factor_data <- sapply(x, function(y) get_variable(mg, y))
sample_data(mg)$combined <- apply(factor_data, 1, paste0, collapse='|')
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
mg <- tax_glom(mg, hue)
# Group by multiple columns
factor_data <- sapply(x, function(y) get_variable(mg, y))
sample_data(mg)$combined <- apply(factor_data, 1, paste0, collapse='|')
mg <- merge_samples(mg, 'combined')
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
mg <- tax_glom(mg, hue)
# Group by multiple columns
factor_data <- sapply(x, function(y) get_variable(mg, y))
sample_data(mg)$combined <- apply(factor_data, 1, paste0, collapse=';')
mg <- merge_samples(mg, 'combined')
sample_names(mg)
strsplit(sample_names(mg), ';')
as.data.frame(strsplit(sample_names(mg), ';'))
as.data.frame(strsplit(sample_names(mg), ';'))[1, ]
as.data.frame(strsplit(sample_names(mg), ';'))[2.]
as.data.frame(strsplit(sample_names(mg), ';'))[2,]
strsplit(sample_names(mg), ';')
unlist(strsplit(sample_names(mg), ';'))
unlist(strsplit(sample_names(mg), ';'))[1]
unlist(strsplit(sample_names(mg), ';'))[2]
unlist(strsplit(sample_names(mg), ';'))
multiindex <- as.data.frame(strsplit(sample_names(mg), ';'))
multiindex[1, ]
multiindex[2, ]
# Fix merge_samples metadata (GitHub issue #243)
for (i in 1:length(x)) {
sample_data(mg)[[x[i]]] <- factor(multiindex[i, ], levels=levels(sample_data(metagenome)[[x[i]]]))
}
head(sample_data(mg))
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
mg <- tax_glom(mg, hue)
# Group by multiple columns
factor_data <- sapply(x, function(y) get_variable(mg, y))
sample_data(mg)$combined <- apply(factor_data, 1, paste0, collapse=';')
mg <- merge_samples(mg, 'combined')
multiindex <- as.data.frame(strsplit(sample_names(mg), ';'))
factor(multiindex[1, ], levels=levels(sample_data(metagenome)[[x[1]]]))
multiindex[1, ]
factor(as.character(multiindex[1, ]), levels=levels(sample_data(metagenome)[[x[1]]]))
multiindex[1, ]
as.character(multiindex[1, ])
names(multiindex[1, ])
multiindex[1]
multiindex[[1]]
str(multiindex)
str(multiindex[1,])
str(multiindex[1,1])
as.matrix(strsplit(sample_names(mg), ';'))
sample_names(mg) %>% separate(';')
sample_names(mg) %>% tidyr::separate(';')
sample_names(mg) %>% dplyr::separate(';')
sample_names(mg) %>% tidyr::separate(';')
data.frame(sample_names(mg)) %>% tidyr::separate(';')
data.frame(sample_names(mg)) %>% tidyr::separate(';', x)
data.frame(sample_names(mg))
data.frame(sample_names(mg)) %>% tidyr::separate('sample_names.mg', ;')
data.frame(sample_names(mg)) %>% tidyr::separate('sample_names.mg.', ;')
data.frame(sample_names(mg)) %>% tidyr::separate('sample_names.mg.', '';')
data.frame(sample_names(mg)) %>% tidyr::separate('sample_names.mg.', ';')
as.data.frame(strsplit(sample_names(mg), ';'))
t(as.data.frame(strsplit(sample_names(mg), ';')))
t(as.data.frame(strsplit(sample_names(mg), ';')))[, 1]
as.character(t(as.data.frame(strsplit(sample_names(mg), ';')))[, 1])
multiindex <- t(as.data.frame(strsplit(sample_names(mg), ';')))
factor(multiindex[, i], levels=levels(sample_data(metagenome)[[x[i]]]))
factor(as.character(multiindex[, i]), levels=levels(sample_data(metagenome)[[x[i]]]))
multiindex <- t(as.data.frame(strsplit(sample_names(mg), ';')))
# Fix merge_samples metadata (GitHub issue #243)
for (i in 1:length(x)) {
sample_data(mg)[[x[i]]] <- factor(
as.character(multiindex[, i]), levels=levels(sample_data(metagenome)[[x[i]]])
)
}
sample_data(mg)
metagenome <- load_metagenome()
for (clade in c('nirS', 'dsrB')) {
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
for (rank in c('Genus')) {
stacked_barplot(mg, 'eruption', rank)
ggsave(sprintf("%s/%s-barplot-eruption-per-%s.pdf", fig_dir, clade, rank))
stacked_barplot(mg, 'PCA_Chem_Group', rank)
ggsave(sprintf("%s/%s-barplot-PCA_Chem_Group-per-%s.pdf", fig_dir, clade, rank))
}
}
stacked_barplot(mg, c('eruption', 'PCA_Chem_Group'), rank)
x <- c('eruption', 'PCA_Chem_Group')
mg <- tax_glom(mg, hue)
# Group by multiple columns
factor_data <- sapply(x, function(y) get_variable(mg, y))
sample_data(mg)$combined <- apply(factor_data, 1, paste0, collapse=';')
mg <- merge_samples(mg, 'combined')
multiindex <- t(as.data.frame(strsplit(sample_names(mg), ';')))
# Fix merge_samples metadata (GitHub issue #243)
for (i in 1:length(x)) {
sample_data(mg)[[x[i]]] <- factor(
as.character(multiindex[, i]), levels=levels(sample_data(metagenome)[[x[i]]])
)
}
mg <- transform_sample_counts(mg, function(y) y/sum(y))
data <- psmelt(mg)
rank_sums <- data %>%
group_by_at(hue) %>%
summarize(Abundance=sum(Abundance)) %>%
arrange(Abundance)
data[[hue]] <- factor(data[[hue]], levels=rank_sums[[hue]])
data <- data[order(data[[hue]]), ]
nhue <- nlevels(data[[hue]])
if (nhue < 52) {
palette <- pal_igv()(nhue)
} else {
palette <- rep(pal_igv()(51), 1+int(nhue/51))[1:nhue]
}
p <- ggplot(data=data, aes_string(x=x, y='Abundance', fill=hue)) +
gginit() +
geom_bar(aes(), stat="identity", position="stack", color='black',
size=0.1, width=0.5) +
scale_fill_manual(values=palette) +
ylab('Proportion') +
labs(title=sprintf('Taxonomic composition (%s)', hue))
data
head(data)
length(x)
tmp='avdvd'
length(tmp)
tmp[0]
tmp[01]
tmp[1]
p <- ggplot(data=data, aes_string(x=x[1], y='Abundance', fill=hue)) +
gginit() +
geom_bar(aes(), stat="identity", position="stack", color='black',
size=0.1, width=0.5) +
scale_fill_manual(values=palette) +
ylab('Proportion') +
labs(title=sprintf('Taxonomic composition (%s)', hue))
p
p <- p + facet_grid(as.formula(sprintf('~ %s', strata)))
p <- p + facet_grid(as.formula(sprintf('~ %s', x[-1])))
p
source('plot_utils.R')
stacked_barplot(mg, c('PCA_Chem_Group', 'eruption'), rank)
clade
stacked_barplot(mg, c('Site_id', 'eruption'), rank)
stacked_barplot(mg, c('site_id', 'eruption'), rank)
mg <- filter_metagenome(
metagenome, min_prevalence=0,
clade_file=sprintf('data/functional-clades/%s_genuses.tsv', clade)
)
stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R')
stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
gginit <- function() {
return(
theme(plot.background=element_rect("white"),
title=element_text(size=16),
# panel.background=element_rect("white"),
panel.grid=element_line("white"),
axis.line=element_line("gray25"),
axis.text=element_text(size=12, color="gray25"),
axis.title=element_text(size=12, color="gray25"),
legend.title=element_text(size=14),
legend.text=element_text(size=12),
legend.key=element_rect("white"))
)
}
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)\
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
source('plot_utils.R') ; stacked_barplot(mg, c('site_id', 'eruption'), rank)
metagenome <- load_metagenome()
metagenome <- filter_metagenome(metagenome, min_prevalence=1)
plot_richness(metagenome, x='PCA_Chem_Group', measures=c("Observed"))
head(data)
data <- estimate_richness(metagenome, measures=c("Observed", "InvSimpson", "Shannon", "Chao1"))
data
head(data)
head(melt(data))
data %>% full_join(sample_data(metagenome))
head(sample_data(metagenome))
merge(data, sample_data(metagenome))
head(merge(data, sample_data(metagenome)))
data <- cbind(
sample_data(metagenome),
estimate_richness(metagenome, measures=c("Observed", "InvSimpson", "Shannon", "Chao1"))
)
head(data)
?melt
df <- melt(data[c(x, y)], id_vars=x, var.name='metric', value.name='score')
y <- c("Observed", "InvSimpson", "Shannon", "Chao1")
df <- melt(data[c(x, y)], id_vars=x, var.name='metric', value.name='score')
df
head(df)
df <- melt(data[c(x, y)], id_vars=x, variable.name='metric', value.name='score')
df <- melt.data.frame(data[c(x, y)], id_vars=x, variable.name='metric', value.name='score')
df <- reshape2::melt(data[c(x, y)], id_vars=x, variable.name='metric', value.name='score')
p <- ggplot(data=data, aes_string(x=x, y=, fill=hue)) +
gginit() +
geom_box()
head(df)
p <- ggplot(data=data, aes_string(x=x, y='metric')) +
gginit() +
geom_box()
p <- ggplot(data=df, aes_string(x=x, y='metric')) +
gginit() +
geom_box()
x
p <- ggplot(data=df, aes_string(x=x[1], y='metric')) +
gginit() +
geom_box()
p <- ggplot(data=df, aes_string(x=x[1], y='metric')) +
gginit() +
geom_boxplot()
p
p <- ggplot(data=df, aes_string(x=x[1], y='score', fill='metric')) +
gginit() +
geom_boxplot()
p
p <- ggplot(data=df, aes_string(x='metric', y='score', fill=x[1])) +
gginit() +
geom_boxplot()
p
p <- ggplot(data=df, aes_string(x=x[1], y='score')) +
gginit() +
geom_boxplot() +
facet_wrap( . ~ metric)
p
p <- ggplot(data=df, aes_string(x=x[1], y='score')) +
gginit() +
geom_boxplot() +
facet_wrap( . ~ metric, scales='free_y')
p
p <- ggplot(data=df, aes_string(x=x[1], y='score', fill=x[2])) +
gginit() +
geom_boxplot() +
facet_wrap( . ~ metric, scales='free_y')
p
p <- ggplot(data=df, aes_string(x=x[1], y='score', fill=x[length(x)])) +
gginit() +
geom_boxplot() +
facet_wrap( . ~ metric, scales='free_y')
p
diversity_plot(data, x='PCA_Chem_Group', y=metrics)
source('plot_utils.R')
diversity_plot(data, x='PCA_Chem_Group', y=metrics)
metrics <- c("Observed", "InvSimpson", "Shannon", "Chao1")
data <- cbind(
sample_data(metagenome),
estimate_richness(metagenome, measures=metrics)
)
diversity_plot(data, x='PCA_Chem_Group', y=metrics)
diversity_plot(data, x=c('PCA_Chem_Group', 'eruption'), y=metrics)
diversity_plot(data, x=c('eruption', 'PCA_Chem_Group'), y=metrics)
diversity_plot(data, x=c('eruption'), y=metrics)
diversity_plot(data, x=c('eruption'), y=metrics) +
ggsave(sprintf("%s/boxplot-alpha_diversity-per-eruption.pdf", fig_dir))
diversity_plot(data, x=c('PCA_Chem_Group'), y=metrics) +
ggsave(sprintf("%s/boxplot-alpha_diversity-per-PCA_Chem_Group.pdf", fig_dir))
diversity_plot(data, x=c('eruption', 'PCA_Chem_Group'), y=metrics) +
ggsave(sprintf("%s/boxplot-alpha_diversity-per-eruption-PCA_Chem_Group.pdf", fig_dir))
