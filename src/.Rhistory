test <- rep(1:10, 3)
test <- cbind(1:10, 1:10, 1:10)
prcomp(test)
test_data <- matrix(n_samples, n_features)
n_features <- 100
n_samples <- 200
test_data <- matrix(n_samples, n_features)
?matrix
random_matrix <- function(n_samples, n_features) {
data <- matrix(nrow=n_samples, ncol=n_features)
for (i in 1:n_samples) {
data[i, ] <- runif(n_features)
}
return(data)
}
n_features <- 100
n_samples <- 200
data <- random_matrix(n_features, n_samples)
PCA_components <- prcomp(data)
plot(PCA_components)
biplot(PCA_components)
n_features <- 150
n_samples <- 200
data <- random_matrix(n_features, n_samples)
PCA_components <- prcomp(data)
plot(PCA_components)
biplot(PCA_components)
data(iris)
iris
dim(iris)
PCA_components <- prcomp(iris)
plot(PCA_components)
biplot(PCA_components)
?biplot
PCA_components <- prcomp(t(iris))
plot(PCA_components)
PCA_components <- prcomp(t(iris))
head(iris)
data(mtcars)
dim(mtcars)
head(mtcars)
pca_components <- prcomp(mtcars)
pca_object <- prcomp(mtcars)
plot(pca_object)
biplot(pca_object)
biplot(pca_object, cex=1)
biplot(pca_object, cex=.1)
biplot(pca_object, cex=.5)
biplot(pca_object, cex=.8)
biplot(pca_object)
pca_object <- prcomp(mtcars)
data(mtcars)
mtcars
mtcars.head()
head(mtcars)
mtcars[0, 1]
mtcars[1, 1]
mtcars[1, 1] <- NULL
mtcars[1, 1] <- NaN
head(mtcars)
pca_object <- prcomp(mtcars)
ggplot(fgjoin, aes(as.factor(PCA_Chem_Group), gamma, fill=as.factor(topic)))+geom_boxplot()
library(ggplot2)
library(dplyr)
## Load the table into the variable "RainyData"
RainyData <- read.csv("RainySeasonMasterDraft.1B.csv")
## Set the right order for the sites\
site_numbers <- as.numeric(str_extract(RainyData$Site, '[0-9]+'))
site_order <- RainyData$Site[order(site_numbers)]
tmp <- as.data.frame(cbind(rep(1, 5), rep(2, 5)))
tmp
dim(tmp)
dim(as.matrix(tmp))
tmp
tmp[, c(TRUE,FALSE)]
tmp[, c(TRUE)]
tmp <- as.data.frame(cbind(rep(1, 5), rep(2, 5), rep(3,5)))
tmp
tmp[, c(T,F,T)]
curve(dlnorm(x, meanlog=0, sdlog=1), from=0, to=10)
curve(dlnorm(x, meanlog=1, sdlog=3), from=0, to=10)
curve(dlnorm(x, meanlog=1, sdlog=2), from=0, to=10)
as.numeric(cut_number(c(1,1,2,3,4,10),3))
ggplot2::cut_number(c(1,1,2,3,4,10),3)
as.numeric(ggplot2::cut_number(c(1,1,2,3,4,10),3))
as.numeric(ggplot2::cut_number(c(12,1,2,3,4,10),3))
cut(c(12,1,2,3,4,10),3)
as.numeric(cut(c(12,1,2,3,4,10),3))
?cut
?cut_number
colors <- c(
PCA=c(A='red', B='blue', C='green', D='purple'),
eruption=c(pre-eruption='salmon', post-eruption='teal')
)
PCA_colors <- c(A='red', B='blue', C='green', D='purple')
eruption_colors <- c('salmon', 'teal')
names(eruption_colors) <- c('pre-eruption', 'post-eruption')
colors <- c(
PCA=PCA_colors,
eruption=eruption_colors
)
colors
colors <- list(
PCA=PCA_colors,
eruption=eruption_colors
)
colors
colors$PCA
colors <- list(
PCA=c(A='red', B='blue', C='green', D='purple'),
eruption=c(pre-eruption='salmon', post-eruption='teal')
)
PCA_colors <- c(A='red', B='blue', C='green', D='purple')
eruption_colors <- c('salmon', 'teal')
names(eruption_colors) <- c('pre-eruption', 'p-eruption')
colors <- list(
PCA=PCA_colors,
eruption=eruption_colors
)
colors <- list(
PCA_Chem_Group=PCA_colors,
eruption=eruption_colors
)
source('loader.R')
source('util.R')
setwd("~/code/labhuiofrank analyses/isme_paper/r-reproducibility/src")
source('loader.R')
source('util.R')
hue_cols <- c('PCA_Chem_Group', 'eruption')
metagenome <- load_metagenome()
metagenome <- filter_metagenome(metagenome, min_prevalence=2)
metrics <- c("Observed", "InvSimpson", "Shannon", "Chao1")
data_all <- cbind(sample_data(metagenome),
estimate_richness(metagenome, measures=metrics))
# Add Pielou that's not implemented in Phyloseq
data_all$Pielou <- data_all$Shannon / log(data_all$Observed)
metrics <- c(metrics, 'Pielou')
data <- data_all[, c(hue_cols, metrics[metrics != 'Observed'])] %>%
pivot_longer(names_to='metric', values_to='value', cols=-hue_cols) %>%
pivot_longer(names_to='factor', values_to='level', cols=-c('metric', 'value'))
data$metric <- as.factor(data$metric)
data$factor <- as.factor(data$factor)
data$level <- factor(data$level, levels=levels(unlist(list(data_all[hue_cols]))))
label_levels <- sprintf(
"%s\n(%s)",
rep(levels(data$metric), nlevels(data$factor)),
rep(levels(data$factor), each=nlevels(data$metric))
)
data$labels <- factor(sprintf("%s\n(%s)", data$metric, data$factor), levels=label_levels)
diversity_plot <- function(data=NULL, x=NULL, y=NULL, ncol=4) {
p <- ggplot(data=data, aes_string(x=x[1], y=y, fill=x[length(x)])) +
gginit() +
geom_boxplot() +
facet_wrap(~ labels, scales='free', ncol=ncol)
return(p)
}
diversity_plot(data=data[data$factor=='eruption', ], x='level', y='value', ncol=4) +
guides(fill = FALSE) + xlab('') + ylab('') +
scale_fill_manual(values=colors$eruption)
eruption_colors <- c('salmon', 'darkcyan')
names(eruption_colors) <- c('pre-eruption', 'p-eruption')
colors <- list(
PCA_Chem_Group=PCA_colors,
eruption=eruption_colors
)
diversity_plot(data=data[data$factor=='eruption', ], x='level', y='value', ncol=4) +
guides(fill = FALSE) + xlab('') + ylab('') +
scale_fill_manual(values=colors$eruption)
data
data$level
PCA_colors <- c(A='red', B='blue', C='green', D='purple')
eruption_colors <- c('salmon', 'teal')
names(eruption_colors) <- c('pre-eruption', 'post-eruption')
colors <- list(
PCA_Chem_Group=PCA_colors,
eruption=eruption_colors
)
diversity_plot(data=data[data$factor=='eruption', ], x='level', y='value', ncol=4) +
guides(fill = FALSE) + xlab('') + ylab('') +
scale_fill_manual(values=colors$eruption)
eruption_colors <- c('salmon', 'darkcyan')
names(eruption_colors) <- c('pre-eruption', 'post-eruption')
colors <- list(
PCA_Chem_Group=PCA_colors,
eruption=eruption_colors
)
diversity_plot(data=data[data$factor=='eruption', ], x='level', y='value', ncol=4) +
guides(fill = FALSE) + xlab('') + ylab('') +
scale_fill_manual(values=colors$eruption)
diversity_plot(data=data[data$factor=='PCA_Chem_Group', ], x='level', y='value', ncol=4) +
guides(fill = FALSE) + xlab('') + ylab('') +
scale_fill_manual(values=colors$PCA_Chem_Group)
source('loader.R')
source('util.R')
library(vegan)
subsampling_level <- 5000
plot_sample_distr <- function(sizes, output=NULL, bins=30, cutoff=6000) {
plot <- data.frame(frequency=sizes) %>%
ggplot(aes(frequency)) +
gginit() +
geom_histogram(fill='#006daa', color='black', bins=bins) +
scale_x_log10() +
xlab('Sample size') + ylab('Frequency') +
geom_vline(xintercept=c(cutoff), color="red", linetype=2) +
annotate("text", x=cutoff, y=7, label=cutoff, color='red', fontface='bold')
return(plot)
}
plot_components <- function(data=NULL, x=NULL, y=NULL, hue=NULL, arrows=NULL, col=NULL, label=NULL,
title="", size=2, cex=5) {
pal <- pal_jco()(nlevels(data[[hue]]))
p <- ggplot(data) +
gginit() +
coord_fixed() +
scale_color_manual(values=pal) +
geom_vline(xintercept=c(0), color="grey70", linetype=2) +
geom_hline(yintercept=c(0), color="grey70", linetype=2) +
labs(title=title)
# Plot textual labels instead of circles
if (!is.null(label)) {
p <- p + geom_text(aes_string(x=x, y=y, color=hue, label=label), size=size, fontface = "bold")
} else {
p <- p + geom_point(aes_string(x=x, y=y, color=hue), shape=19, size=size, alpha=0.8)
}
# Overlay arrows
if (!is.null(arrows)) {
arrows_scale <- 0.4 * max(data[, c(x,y)]) / max(arrows)
arrows_rescale <- arrows * arrows_scale
label_nudge <- max(arrows_rescale) * 0.2
p <- p +
geom_segment(data=arrows_rescale, aes_string(x=0, y=0, xend=x, yend=y),
arrow=arrow(length=unit(0.2, "cm"))) +
geom_text(data=arrows_rescale, aes_string(x=x, y=y), label=rownames(arrows_rescale),
cex=cex, nudge_x=label_nudge, nudge_y=label_nudge, fontface='bold')
} else if (!is.null(col)) {
# Can't do both arrows and facets. If no arrows, facet_grid is possible
p <- p + facet_wrap(as.formula(sprintf('~ %s', col)))
}
return(p)
}
metagenome <- load_metagenome()
metagenome <- filter_metagenome(metagenome, min_prevalence=2)
# Plot sample distribution for subsampling
plot_sample_distr(sample_sums(metagenome), cutoff=subsampling_level)
ggsave(sprintf("%s/sample_sizes.pdf", io['figures']), width=8, height=5)
# Subsampling
metagenome <- rarefy_even_depth(metagenome, subsampling_level, replace=FALSE, rngseed=42)
metadata <- as(sample_data(metagenome), 'data.frame')
hue_names <- c('PCA_Chem_Group', 'eruption')
# Relative abundance
metagenome_relabund <- transform_sample_counts(metagenome, function(x) sqrt(x / sum(x)))
cca_model <- ordinate(metagenome_relabund, method='CCA', formula= ~ DO + pH + SPC + SO4 + NOx)
cca_components <- as.data.frame(scores(cca_model, display='sites'))
cca_components[, c(hue_names, 'site_id')] = metadata[, c(hue_names, 'site_id')]
cca_arrows <- as.data.frame(scores(cca_model, display="bp", scaling="species"))
for (hue_name in hue_names) {
plot_components(data=cca_components, arrows=cca_arrows,
x='CCA1', y='CCA2', hue=hue_name,
label='site_id', size=7, cex=8)
if (hue_name == 'eruption') {
ggsave(sprintf("%s/Figure-5 CCA-%s.pdf", io['figures'], hue_name), scale=2)
} else {
ggsave(sprintf("%s/Figure-S3 CCA-%s.pdf", io['figures'], hue_name), scale=2)
}
}
plot_components(data=components, x=paste0(method, '1'), y=paste0(method, '2'),
hue='PCA_Chem_Group', col='eruption') +
scale_color_manual(values=colors$PCA_Chem_Group)
for (hue_name in hue_names) {
plot_components(data=cca_components, arrows=cca_arrows,
x='CCA1', y='CCA2', hue=hue_name,
label='site_id', size=7, cex=8) +
scale_color_manual(values=colors[[hue_name]]) +
if (hue_name == 'eruption') {
ggsave(sprintf("%s/Figure-5 CCA-%s.pdf", io['figures'], hue_name), scale=2)
} else {
ggsave(sprintf("%s/Figure-S3 CCA-%s.pdf", io['figures'], hue_name), scale=2)
}
}
source('loader.R')
source('util.R')
library(DESeq2)
library(vegan)
library(BiocParallel)
pval <- 0.05
hue_cols <- c('PCA_Chem_Group', 'eruption')
threads <- 3
register(MulticoreParam(threads))
metagenome <- load_metagenome()
metagenome <- subset_samples(metagenome, PCA_Chem_Group %in% c('C', 'D'))
metagenome <- speedyseq::tax_glom(metagenome, 'Genus')
metagenome <- filter_metagenome(metagenome, min_prevalence=1)
#============= Fit DESeq2 model ===============#
design <- as.formula(sprintf(" ~ %s", paste(hue_cols, collapse='+')))
diagdds <- phyloseq_to_deseq2(metagenome, design)
# calculate geometric means prior to estimate size factors
# DESeq2 cannot normalize when every OTU contains at least one zero
geom_mean <- function(x) { exp(mean(log(x[x>0]), na.rm=TRUE)) }
geoMeans <- apply(counts(diagdds), 1, geom_mean)
diagdds <- estimateSizeFactors(diagdds, geoMeans=geoMeans)
diagdds <- DESeq(diagdds, fitType="local", test="Wald", parallel=TRUE, quiet=TRUE)
sig_otu_table <- results(diagdds, alpha=pval, pAdjustMethod='BH',parallel=TRUE)
sig_otu_table <- sig_otu_table[order(sig_otu_table$padj, na.last=NA), ]
sig_otu_table$padj <- signif(sig_otu_table$padj, 3)
sig_otu_table <- cbind(
as(sig_otu_table, "data.frame"),
as(tax_table(metagenome)[rownames(sig_otu_table), ], "matrix")
)
taxa_to_plot <- list(dsrB=c('Desulfurivibrio', 'Desulfovibrio', 'Aeromonas', 'Alcanivorax',
'Hymenobacter', 'Desulfobulbus'),
nirS=c('Pseudomonas', 'Aquabacterium', 'Hydrogenophaga', 'Halomonas',
'Desulfurivibrio', 'Bradyrhizobium', 'Pseudoxanthomonas'))
data <- c()
for (clade in names(taxa_to_plot)) {
mg_subset <- subset_taxa(metagenome, Genus %in% taxa_to_plot[[clade]])
abundance <- as.data.frame(otu_table(mg_subset))
colnames(abundance) <- tax_table(mg_subset)[colnames(abundance), 'Genus']
data <- abundance %>%
bind_cols(as(sample_data(mg_subset)[, hue_cols], 'data.frame')) %>%
pivot_longer(-hue_cols, names_to='Genus', values_to='abundance') %>%
pivot_longer(-c('Genus', 'abundance'), names_to='factor', values_to='level') %>%
left_join(sig_otu_table[, c('Genus', 'padj')]) %>%
mutate(clade=clade, label=sprintf('%s (%s, padj=%s)', Genus, clade, padj)) %>%
bind_rows(data)
}
plot.eruption <-
ggplot(data[data$factor=='eruption', ], aes(x=Genus, y=abundance, fill=level)) +
gginit() +
geom_boxplot() +
scale_fill_manual(values=colors[[level]]) +
scale_y_continuous(trans=scales::pseudo_log_trans(base=10)) +
facet_wrap(' ~ label', scale="free") +
labs(x='', y='abundance')
plot.eruption <-
ggplot(data[data$factor=='eruption', ], aes(x=Genus, y=abundance, fill=level)) +
gginit() +
geom_boxplot() +
scale_fill_manual(values=colors$eruption) +
scale_y_continuous(trans=scales::pseudo_log_trans(base=10)) +
facet_wrap(' ~ label', scale="free") +
labs(x='', y='abundance')
ggplot(data[data$factor=='eruption', ], aes(x=Genus, y=abundance, fill=level)) +
gginit() +
geom_boxplot() +
scale_fill_manual(values=colors$eruption) +
scale_y_continuous(trans=scales::pseudo_log_trans(base=10)) +
facet_wrap(' ~ label', scale="free") +
labs(x='', y='abundance')
ggsave(sprintf('%s/Figure-8A distr_eruption.pdf', io['figures']), width=50, height=30, units="cm")
ggplot(data[data$factor=='PCA_Chem_Group', ], aes(x=Genus, y=abundance, fill=level)) +
gginit() +
geom_boxplot() +
scale_fill_manual(values=colors$PCA_Chem_Group) +
scale_y_continuous(trans=scales::pseudo_log_trans(base=10)) +
facet_wrap(' ~ label', scale="free") +
labs(x='', y='abundance')
ggsave(sprintf('%s/Figure-8B distr_PCA_Chem_Group.pdf', io['figures']), width=50, height=30, units="cm")
diversity_plot <- function(data=NULL, x=NULL, y=NULL, ncol=4) {
p <- ggplot(data=data, aes_string(x=x[1], y=y, fill=x[length(x)])) +
gginit() +
geom_boxplot() +
facet_wrap(~ labels, scales='free', ncol=ncol)
return(p)
}
diversity_plot(data=data[data$factor=='eruption', ], x='level', y='value', ncol=4) +
guides(fill = FALSE) + xlab('') + ylab('') +
scale_fill_manual(values=colors$eruption)
source('loader.R')
source('util.R')
hue_cols <- c('PCA_Chem_Group', 'eruption')
metagenome <- load_metagenome()
metagenome <- filter_metagenome(metagenome, min_prevalence=2)
metrics <- c("Observed", "InvSimpson", "Shannon", "Chao1")
data_all <- cbind(sample_data(metagenome),
estimate_richness(metagenome, measures=metrics))
# Add Pielou that's not implemented in Phyloseq
data_all$Pielou <- data_all$Shannon / log(data_all$Observed)
metrics <- c(metrics, 'Pielou')
data <- data_all[, c(hue_cols, metrics[metrics != 'Observed'])] %>%
pivot_longer(names_to='metric', values_to='value', cols=-hue_cols) %>%
pivot_longer(names_to='factor', values_to='level', cols=-c('metric', 'value'))
data$metric <- as.factor(data$metric)
data$factor <- as.factor(data$factor)
data$level <- factor(data$level, levels=levels(unlist(list(data_all[hue_cols]))))
label_levels <- sprintf(
"%s\n(%s)",
rep(levels(data$metric), nlevels(data$factor)),
rep(levels(data$factor), each=nlevels(data$metric))
)
data$labels <- factor(sprintf("%s\n(%s)", data$metric, data$factor), levels=label_levels)
diversity_plot <- function(data=NULL, x=NULL, y=NULL, ncol=4) {
p <- ggplot(data=data, aes_string(x=x[1], y=y, fill=x[length(x)])) +
gginit() +
geom_boxplot() +
facet_wrap(~ labels, scales='free', ncol=ncol)
return(p)
}
diversity_plot(data=data[data$factor=='eruption', ], x='level', y='value', ncol=4) +
guides(fill = FALSE) + xlab('') + ylab('') +
scale_fill_manual(values=colors$eruption)
ggsave(sprintf("%s/Figure-6 boxplot-alpha_diversity-eruption.pdf", io['figures']), width=12)
